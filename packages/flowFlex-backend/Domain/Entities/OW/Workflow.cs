using System.ComponentModel.DataAnnotations;
using FlowFlex.Domain.Entities.Base;
using FlowFlex.Domain.Shared.Enums.OW;
using SqlSugar;

namespace FlowFlex.Domain.Entities.OW
{
    /// <summary>
    /// Workflow Entity
    /// </summary>
    [SugarTable("ff_workflow")]
    public class Workflow : EntityBaseCreateInfo
    {
        /// <summary>
        /// Workflow Name
        /// </summary>

        [StringLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// Workflow Description
        /// </summary>
        [StringLength(500)]
        public string Description { get; set; }

        /// <summary>
        /// Is Default Workflow
        /// </summary>
        public bool IsDefault { get; set; }

        /// <summary>
        /// Workflow Status (active/inactive)
        /// </summary>
        [StringLength(20)]
        public string Status { get; set; } = "active";

        /// <summary>
        /// Start Date
        /// </summary>
        [SugarColumn(ColumnName = "start_date")]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// End Date (nullable, default workflow cannot be filled)
        /// </summary>
        [SugarColumn(ColumnName = "end_date")]
        public DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// Version Number
        /// </summary>
        public int Version { get; set; } = 1;

        /// <summary>
        /// Is Active
        /// </summary>
        public bool IsActive { get; set; } = true;

        /// <summary>
        /// Whether this workflow was generated by AI
        /// </summary>
        [SugarColumn(ColumnName = "is_ai_generated")]
        public bool IsAIGenerated { get; set; } = false;

        /// <summary>
        /// JSONB for workflow configuration (stages, settings, etc.)
        /// </summary>
        [SugarColumn(ColumnName = "config_json", ColumnDataType = "jsonb", IsJson = true)]
        public string ConfigJson { get; set; }

        /// <summary>
        /// Visible in Portal - Controls whether this workflow is visible in the portal
        /// </summary>
        [SugarColumn(ColumnName = "visible_in_portal")]
        public bool VisibleInPortal { get; set; } = true;

        /// <summary>
        /// Portal Permission - Defines the level of access in the customer portal (Viewable or Completable)
        /// Only applies when VisibleInPortal is true
        /// </summary>
        [SugarColumn(ColumnName = "portal_permission")]
        public PortalAvailabilityEnum? PortalPermission { get; set; } = PortalAvailabilityEnum.Viewable;

        /// <summary>
        /// View Permission Mode - Defines how view permissions are controlled (Public/VisibleToTeams/InvisibleToTeams)
        /// </summary>
        [SugarColumn(ColumnName = "view_permission_mode")]
        public ViewPermissionModeEnum ViewPermissionMode { get; set; } = ViewPermissionModeEnum.Public;

        /// <summary>
        /// View Teams - JSONB array of team names for view permission control
        /// Used with VisibleToTeams or InvisibleToTeams mode
        /// </summary>
        [SugarColumn(ColumnName = "view_teams", ColumnDataType = "jsonb", IsJson = true)]
        public string ViewTeams { get; set; }

        /// <summary>
        /// Operate Teams - JSONB array of team names that can perform operations (Create/Update/Delete)
        /// </summary>
        [SugarColumn(ColumnName = "operate_teams", ColumnDataType = "jsonb", IsJson = true)]
        public string OperateTeams { get; set; }

        /// <summary>
        /// Use Same Team For Operate - Indicates whether operate teams should use the same teams as view permission
        /// When true, OperateTeams will be automatically synchronized with ViewTeams
        /// </summary>
        [SugarColumn(ColumnName = "use_same_team_for_operate")]
        public bool UseSameTeamForOperate { get; set; } = false;

        /// <summary>
        /// Associated Stage Collection
        /// </summary>
        [Navigate(NavigateType.OneToMany, nameof(Stage.WorkflowId))]
        public List<Stage> Stages { get; set; }
    }
}
