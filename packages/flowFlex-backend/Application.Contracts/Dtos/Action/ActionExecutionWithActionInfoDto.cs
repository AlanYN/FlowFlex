using FlowFlex.Domain.Shared.JsonConverters;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace FlowFlex.Application.Contracts.Dtos.Action
{
    /// <summary>
    /// Action execution with action information DTO
    /// </summary>
    public class ActionExecutionWithActionInfoDto
    {
        /// <summary>
        /// Execution ID
        /// </summary>
        [JsonConverter(typeof(LongToStringConverter))]
        public long Id { get; set; }

        /// <summary>
        /// Associated ActionDefinition ID
        /// </summary>
        [JsonConverter(typeof(LongToStringConverter))]
        public long ActionDefinitionId { get; set; }

        /// <summary>
        /// Action code
        /// </summary>
        public string ActionCode { get; set; } = string.Empty;

        /// <summary>
        /// Execution ID (unique identifier generated by business layer)
        /// </summary>
        public string ExecutionId { get; set; } = string.Empty;

        /// <summary>
        /// Associated ActionTriggerMapping ID (optional, for traceability)
        /// </summary>
        [JsonConverter(typeof(LongToStringConverter))]
        public long? ActionTriggerMappingId { get; set; }

        /// <summary>
        /// Action name (redundant field for easier querying)
        /// </summary>
        public string ActionName { get; set; } = string.Empty;

        /// <summary>
        /// Action type (redundant field for easier querying)
        /// </summary>
        public string ActionType { get; set; } = string.Empty;

        /// <summary>
        /// Trigger context data (JSON format, contains relevant data at trigger time)
        /// </summary>
        public JToken TriggerContext { get; set; } = new JObject();

        /// <summary>
        /// Execution status (Pending, Running, Success, Failed, Cancelled)
        /// </summary>
        public string ExecutionStatus { get; set; } = "Pending";

        /// <summary>
        /// Execution start time
        /// </summary>
        public DateTimeOffset? StartedAt { get; set; }

        /// <summary>
        /// Execution completion time
        /// </summary>
        public DateTimeOffset? CompletedAt { get; set; }

        /// <summary>
        /// Execution duration in milliseconds
        /// </summary>
        public long? DurationMs { get; set; }

        /// <summary>
        /// Execution input parameters (JSON format)
        /// </summary>
        public JToken ExecutionInput { get; set; } = new JObject();

        /// <summary>
        /// Execution output result (JSON format)
        /// </summary>
        public JToken ExecutionOutput { get; set; } = new JObject();

        /// <summary>
        /// Error message
        /// </summary>
        public string ErrorMessage { get; set; } = string.Empty;

        /// <summary>
        /// Error stack trace
        /// </summary>
        public string ErrorStackTrace { get; set; } = string.Empty;

        /// <summary>
        /// Executor instance information (JSON format, records executor related information)
        /// </summary>
        public JToken ExecutorInfo { get; set; } = new JObject();

        /// <summary>
        /// Creation time
        /// </summary>
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Creator ID
        /// </summary>
        public string CreatedBy { get; set; }
    }
}